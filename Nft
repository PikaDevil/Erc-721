// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
 
import "@openzeppelin/contracts@4.5.0/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts@4.5.0/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts@4.5.0/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
 
contract Test is ERC721, ERC721Enumerable, Ownable {
 
    using Counters for Counters.Counter;
 
    Counters.Counter private _tokenIdCounter;
    // The price of the mint
    uint256 public mintRate = 0.069 ether;
    // The MAX supply
    uint256 public MAX_SUPPLY = 10000;
 
    constructor() ERC721("test", "TST") {}
 
    function safeMint(address to) public payable {
        // Sold out alert
        require(totalSupply() < MAX_SUPPLY, "SOLD OUT!");
        // There was to little ether send
        require(msg.value >= mintRate, "Not enought ether sent.");
        _tokenIdCounter.increment();
        _safeMint(to, _tokenIdCounter.current());
    }
 
    // The following functions are overrides required by Solidity.
 
    function _beforeTokenTransfer(address from, address to, uint256 tokenId)
        internal
        override(ERC721, ERC721Enumerable)
    {
        super._beforeTokenTransfer(from, to, tokenId);
    }
 
    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
    // The WITHDRAW function for the owner
    function withdraw() public onlyOwner {
        require(address(this).balance > 0, "Balance is 0");
        payable(owner()).transfer(address(this).balance);
    }
}
